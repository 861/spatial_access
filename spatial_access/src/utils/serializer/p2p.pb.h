// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#ifndef PROTOBUF_INCLUDED_p2p_2eproto
#define PROTOBUF_INCLUDED_p2p_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_p2p_2eproto 

namespace protobuf_p2p_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_p2p_2eproto
namespace p2p {
class dataFrame;
class dataFrameDefaultTypeInternal;
extern dataFrameDefaultTypeInternal _dataFrame_default_instance_;
class dataFrame_data_frame_row;
class dataFrame_data_frame_rowDefaultTypeInternal;
extern dataFrame_data_frame_rowDefaultTypeInternal _dataFrame_data_frame_row_default_instance_;
}  // namespace p2p
namespace google {
namespace protobuf {
template<> ::p2p::dataFrame* Arena::CreateMaybeMessage<::p2p::dataFrame>(Arena*);
template<> ::p2p::dataFrame_data_frame_row* Arena::CreateMaybeMessage<::p2p::dataFrame_data_frame_row>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace p2p {

// ===================================================================

class dataFrame_data_frame_row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.dataFrame.data_frame_row) */ {
 public:
  dataFrame_data_frame_row();
  virtual ~dataFrame_data_frame_row();

  dataFrame_data_frame_row(const dataFrame_data_frame_row& from);

  inline dataFrame_data_frame_row& operator=(const dataFrame_data_frame_row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  dataFrame_data_frame_row(dataFrame_data_frame_row&& from) noexcept
    : dataFrame_data_frame_row() {
    *this = ::std::move(from);
  }

  inline dataFrame_data_frame_row& operator=(dataFrame_data_frame_row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dataFrame_data_frame_row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dataFrame_data_frame_row* internal_default_instance() {
    return reinterpret_cast<const dataFrame_data_frame_row*>(
               &_dataFrame_data_frame_row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(dataFrame_data_frame_row* other);
  friend void swap(dataFrame_data_frame_row& a, dataFrame_data_frame_row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline dataFrame_data_frame_row* New() const final {
    return CreateMaybeMessage<dataFrame_data_frame_row>(NULL);
  }

  dataFrame_data_frame_row* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<dataFrame_data_frame_row>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const dataFrame_data_frame_row& from);
  void MergeFrom(const dataFrame_data_frame_row& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dataFrame_data_frame_row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 column = 1;
  int column_size() const;
  void clear_column();
  static const int kColumnFieldNumber = 1;
  ::google::protobuf::int32 column(int index) const;
  void set_column(int index, ::google::protobuf::int32 value);
  void add_column(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      column() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_column();

  // @@protoc_insertion_point(class_scope:p2p.dataFrame.data_frame_row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > column_;
  friend struct ::protobuf_p2p_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dataFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.dataFrame) */ {
 public:
  dataFrame();
  virtual ~dataFrame();

  dataFrame(const dataFrame& from);

  inline dataFrame& operator=(const dataFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  dataFrame(dataFrame&& from) noexcept
    : dataFrame() {
    *this = ::std::move(from);
  }

  inline dataFrame& operator=(dataFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dataFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dataFrame* internal_default_instance() {
    return reinterpret_cast<const dataFrame*>(
               &_dataFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(dataFrame* other);
  friend void swap(dataFrame& a, dataFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline dataFrame* New() const final {
    return CreateMaybeMessage<dataFrame>(NULL);
  }

  dataFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<dataFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const dataFrame& from);
  void MergeFrom(const dataFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dataFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef dataFrame_data_frame_row data_frame_row;

  // accessors -------------------------------------------------------

  // repeated int64 row_label = 1;
  int row_label_size() const;
  void clear_row_label();
  static const int kRowLabelFieldNumber = 1;
  ::google::protobuf::int64 row_label(int index) const;
  void set_row_label(int index, ::google::protobuf::int64 value);
  void add_row_label(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      row_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_row_label();

  // repeated int64 col_label = 2;
  int col_label_size() const;
  void clear_col_label();
  static const int kColLabelFieldNumber = 2;
  ::google::protobuf::int64 col_label(int index) const;
  void set_col_label(int index, ::google::protobuf::int64 value);
  void add_col_label(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      col_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_col_label();

  // repeated .p2p.dataFrame.data_frame_row row = 3;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 3;
  ::p2p::dataFrame_data_frame_row* mutable_row(int index);
  ::google::protobuf::RepeatedPtrField< ::p2p::dataFrame_data_frame_row >*
      mutable_row();
  const ::p2p::dataFrame_data_frame_row& row(int index) const;
  ::p2p::dataFrame_data_frame_row* add_row();
  const ::google::protobuf::RepeatedPtrField< ::p2p::dataFrame_data_frame_row >&
      row() const;

  // @@protoc_insertion_point(class_scope:p2p.dataFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > row_label_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > col_label_;
  ::google::protobuf::RepeatedPtrField< ::p2p::dataFrame_data_frame_row > row_;
  friend struct ::protobuf_p2p_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// dataFrame_data_frame_row

// repeated int32 column = 1;
inline int dataFrame_data_frame_row::column_size() const {
  return column_.size();
}
inline void dataFrame_data_frame_row::clear_column() {
  column_.Clear();
}
inline ::google::protobuf::int32 dataFrame_data_frame_row::column(int index) const {
  // @@protoc_insertion_point(field_get:p2p.dataFrame.data_frame_row.column)
  return column_.Get(index);
}
inline void dataFrame_data_frame_row::set_column(int index, ::google::protobuf::int32 value) {
  column_.Set(index, value);
  // @@protoc_insertion_point(field_set:p2p.dataFrame.data_frame_row.column)
}
inline void dataFrame_data_frame_row::add_column(::google::protobuf::int32 value) {
  column_.Add(value);
  // @@protoc_insertion_point(field_add:p2p.dataFrame.data_frame_row.column)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dataFrame_data_frame_row::column() const {
  // @@protoc_insertion_point(field_list:p2p.dataFrame.data_frame_row.column)
  return column_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dataFrame_data_frame_row::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:p2p.dataFrame.data_frame_row.column)
  return &column_;
}

// -------------------------------------------------------------------

// dataFrame

// repeated int64 row_label = 1;
inline int dataFrame::row_label_size() const {
  return row_label_.size();
}
inline void dataFrame::clear_row_label() {
  row_label_.Clear();
}
inline ::google::protobuf::int64 dataFrame::row_label(int index) const {
  // @@protoc_insertion_point(field_get:p2p.dataFrame.row_label)
  return row_label_.Get(index);
}
inline void dataFrame::set_row_label(int index, ::google::protobuf::int64 value) {
  row_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:p2p.dataFrame.row_label)
}
inline void dataFrame::add_row_label(::google::protobuf::int64 value) {
  row_label_.Add(value);
  // @@protoc_insertion_point(field_add:p2p.dataFrame.row_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dataFrame::row_label() const {
  // @@protoc_insertion_point(field_list:p2p.dataFrame.row_label)
  return row_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dataFrame::mutable_row_label() {
  // @@protoc_insertion_point(field_mutable_list:p2p.dataFrame.row_label)
  return &row_label_;
}

// repeated int64 col_label = 2;
inline int dataFrame::col_label_size() const {
  return col_label_.size();
}
inline void dataFrame::clear_col_label() {
  col_label_.Clear();
}
inline ::google::protobuf::int64 dataFrame::col_label(int index) const {
  // @@protoc_insertion_point(field_get:p2p.dataFrame.col_label)
  return col_label_.Get(index);
}
inline void dataFrame::set_col_label(int index, ::google::protobuf::int64 value) {
  col_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:p2p.dataFrame.col_label)
}
inline void dataFrame::add_col_label(::google::protobuf::int64 value) {
  col_label_.Add(value);
  // @@protoc_insertion_point(field_add:p2p.dataFrame.col_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dataFrame::col_label() const {
  // @@protoc_insertion_point(field_list:p2p.dataFrame.col_label)
  return col_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dataFrame::mutable_col_label() {
  // @@protoc_insertion_point(field_mutable_list:p2p.dataFrame.col_label)
  return &col_label_;
}

// repeated .p2p.dataFrame.data_frame_row row = 3;
inline int dataFrame::row_size() const {
  return row_.size();
}
inline void dataFrame::clear_row() {
  row_.Clear();
}
inline ::p2p::dataFrame_data_frame_row* dataFrame::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:p2p.dataFrame.row)
  return row_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::p2p::dataFrame_data_frame_row >*
dataFrame::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:p2p.dataFrame.row)
  return &row_;
}
inline const ::p2p::dataFrame_data_frame_row& dataFrame::row(int index) const {
  // @@protoc_insertion_point(field_get:p2p.dataFrame.row)
  return row_.Get(index);
}
inline ::p2p::dataFrame_data_frame_row* dataFrame::add_row() {
  // @@protoc_insertion_point(field_add:p2p.dataFrame.row)
  return row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::p2p::dataFrame_data_frame_row >&
dataFrame::row() const {
  // @@protoc_insertion_point(field_list:p2p.dataFrame.row)
  return row_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_p2p_2eproto
