// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#include "p2p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_p2p_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p2p_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_dataFrame_data_frame_row;
}  // namespace protobuf_p2p_2eproto
namespace p2p {
class dataFrame_data_frame_rowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<dataFrame_data_frame_row>
      _instance;
} _dataFrame_data_frame_row_default_instance_;
class dataFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<dataFrame>
      _instance;
} _dataFrame_default_instance_;
}  // namespace p2p
namespace protobuf_p2p_2eproto {
static void InitDefaultsdataFrame_data_frame_row() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_dataFrame_data_frame_row_default_instance_;
    new (ptr) ::p2p::dataFrame_data_frame_row();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::dataFrame_data_frame_row::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_dataFrame_data_frame_row =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdataFrame_data_frame_row}, {}};

static void InitDefaultsdataFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_dataFrame_default_instance_;
    new (ptr) ::p2p::dataFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::dataFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_dataFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsdataFrame}, {
      &protobuf_p2p_2eproto::scc_info_dataFrame_data_frame_row.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_dataFrame_data_frame_row.base);
  ::google::protobuf::internal::InitSCC(&scc_info_dataFrame.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame_data_frame_row, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame_data_frame_row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame_data_frame_row, column_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame, row_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame, col_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataFrame, row_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::p2p::dataFrame_data_frame_row)},
  { 7, 15, sizeof(::p2p::dataFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_dataFrame_data_frame_row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_dataFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "p2p.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tp2p.proto\022\003p2p\"\177\n\tdataFrame\022\021\n\trow_lab"
      "el\030\001 \003(\003\022\021\n\tcol_label\030\002 \003(\003\022*\n\003row\030\003 \003(\013"
      "2\035.p2p.dataFrame.data_frame_row\032 \n\016data_"
      "frame_row\022\016\n\006column\030\001 \003(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "p2p.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_p2p_2eproto
namespace p2p {

// ===================================================================

void dataFrame_data_frame_row::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dataFrame_data_frame_row::kColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dataFrame_data_frame_row::dataFrame_data_frame_row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p2p_2eproto::scc_info_dataFrame_data_frame_row.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.dataFrame.data_frame_row)
}
dataFrame_data_frame_row::dataFrame_data_frame_row(const dataFrame_data_frame_row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      column_(from.column_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p2p.dataFrame.data_frame_row)
}

void dataFrame_data_frame_row::SharedCtor() {
}

dataFrame_data_frame_row::~dataFrame_data_frame_row() {
  // @@protoc_insertion_point(destructor:p2p.dataFrame.data_frame_row)
  SharedDtor();
}

void dataFrame_data_frame_row::SharedDtor() {
}

void dataFrame_data_frame_row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* dataFrame_data_frame_row::descriptor() {
  ::protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dataFrame_data_frame_row& dataFrame_data_frame_row::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p2p_2eproto::scc_info_dataFrame_data_frame_row.base);
  return *internal_default_instance();
}


void dataFrame_data_frame_row::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.dataFrame.data_frame_row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dataFrame_data_frame_row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.dataFrame.data_frame_row)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 column = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_column())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_column())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.dataFrame.data_frame_row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.dataFrame.data_frame_row)
  return false;
#undef DO_
}

void dataFrame_data_frame_row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.dataFrame.data_frame_row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 column = 1;
  for (int i = 0, n = this->column_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->column(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.dataFrame.data_frame_row)
}

::google::protobuf::uint8* dataFrame_data_frame_row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.dataFrame.data_frame_row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 column = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->column_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.dataFrame.data_frame_row)
  return target;
}

size_t dataFrame_data_frame_row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.dataFrame.data_frame_row)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 column = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->column_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->column_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dataFrame_data_frame_row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.dataFrame.data_frame_row)
  GOOGLE_DCHECK_NE(&from, this);
  const dataFrame_data_frame_row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dataFrame_data_frame_row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.dataFrame.data_frame_row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.dataFrame.data_frame_row)
    MergeFrom(*source);
  }
}

void dataFrame_data_frame_row::MergeFrom(const dataFrame_data_frame_row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.dataFrame.data_frame_row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_.MergeFrom(from.column_);
}

void dataFrame_data_frame_row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.dataFrame.data_frame_row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dataFrame_data_frame_row::CopyFrom(const dataFrame_data_frame_row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.dataFrame.data_frame_row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dataFrame_data_frame_row::IsInitialized() const {
  return true;
}

void dataFrame_data_frame_row::Swap(dataFrame_data_frame_row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dataFrame_data_frame_row::InternalSwap(dataFrame_data_frame_row* other) {
  using std::swap;
  column_.InternalSwap(&other->column_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata dataFrame_data_frame_row::GetMetadata() const {
  protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void dataFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dataFrame::kRowLabelFieldNumber;
const int dataFrame::kColLabelFieldNumber;
const int dataFrame::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dataFrame::dataFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p2p_2eproto::scc_info_dataFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.dataFrame)
}
dataFrame::dataFrame(const dataFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      row_label_(from.row_label_),
      col_label_(from.col_label_),
      row_(from.row_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p2p.dataFrame)
}

void dataFrame::SharedCtor() {
}

dataFrame::~dataFrame() {
  // @@protoc_insertion_point(destructor:p2p.dataFrame)
  SharedDtor();
}

void dataFrame::SharedDtor() {
}

void dataFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* dataFrame::descriptor() {
  ::protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dataFrame& dataFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p2p_2eproto::scc_info_dataFrame.base);
  return *internal_default_instance();
}


void dataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.dataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_label_.Clear();
  col_label_.Clear();
  row_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dataFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.dataFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 row_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_row_label())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_row_label())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 col_label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_col_label())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_col_label())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p2p.dataFrame.data_frame_row row = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.dataFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.dataFrame)
  return false;
#undef DO_
}

void dataFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.dataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 row_label = 1;
  for (int i = 0, n = this->row_label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->row_label(i), output);
  }

  // repeated int64 col_label = 2;
  for (int i = 0, n = this->col_label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->col_label(i), output);
  }

  // repeated .p2p.dataFrame.data_frame_row row = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->row(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.dataFrame)
}

::google::protobuf::uint8* dataFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.dataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 row_label = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->row_label_, target);

  // repeated int64 col_label = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->col_label_, target);

  // repeated .p2p.dataFrame.data_frame_row row = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->row(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.dataFrame)
  return target;
}

size_t dataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.dataFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 row_label = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->row_label_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->row_label_size());
    total_size += data_size;
  }

  // repeated int64 col_label = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->col_label_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->col_label_size());
    total_size += data_size;
  }

  // repeated .p2p.dataFrame.data_frame_row row = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->row_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->row(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dataFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.dataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const dataFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dataFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.dataFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.dataFrame)
    MergeFrom(*source);
  }
}

void dataFrame::MergeFrom(const dataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.dataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_label_.MergeFrom(from.row_label_);
  col_label_.MergeFrom(from.col_label_);
  row_.MergeFrom(from.row_);
}

void dataFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.dataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dataFrame::CopyFrom(const dataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.dataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dataFrame::IsInitialized() const {
  return true;
}

void dataFrame::Swap(dataFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dataFrame::InternalSwap(dataFrame* other) {
  using std::swap;
  row_label_.InternalSwap(&other->row_label_);
  col_label_.InternalSwap(&other->col_label_);
  CastToBase(&row_)->InternalSwap(CastToBase(&other->row_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata dataFrame::GetMetadata() const {
  protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::dataFrame_data_frame_row* Arena::CreateMaybeMessage< ::p2p::dataFrame_data_frame_row >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::dataFrame_data_frame_row >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::dataFrame* Arena::CreateMaybeMessage< ::p2p::dataFrame >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::dataFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
