// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#include "p2p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace p2p {
class metaDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<metaData>
      _instance;
} _metaData_default_instance_;
class dataRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<dataRow>
      _instance;
} _dataRow_default_instance_;
}  // namespace p2p
namespace protobuf_p2p_2eproto {
static void InitDefaultsmetaData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_metaData_default_instance_;
    new (ptr) ::p2p::metaData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::metaData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_metaData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmetaData}, {}};

static void InitDefaultsdataRow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_dataRow_default_instance_;
    new (ptr) ::p2p::dataRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::dataRow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_dataRow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdataRow}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_metaData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_dataRow.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, is_symmetric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, row_labels_are_remapped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, col_labels_are_remapped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, premap_row_label_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, premap_col_label_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, row_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::metaData, col_label_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataRow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::dataRow, value_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::p2p::metaData)},
  { 19, 25, sizeof(::p2p::dataRow)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_metaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_dataRow_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "p2p.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tp2p.proto\022\003p2p\"\312\001\n\010metaData\022\024\n\014is_symm"
      "etric\030\001 \002(\010\022\037\n\027row_labels_are_remapped\030\002"
      " \002(\010\022\037\n\027col_labels_are_remapped\030\003 \002(\010\022\037\n"
      "\027premap_row_label_string\030\004 \003(\t\022\037\n\027premap"
      "_col_label_string\030\005 \003(\t\022\021\n\trow_label\030\006 \003"
      "(\003\022\021\n\tcol_label\030\007 \003(\003\"\030\n\007dataRow\022\r\n\005valu"
      "e\030\001 \003(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "p2p.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_p2p_2eproto
namespace p2p {

// ===================================================================

void metaData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int metaData::kIsSymmetricFieldNumber;
const int metaData::kRowLabelsAreRemappedFieldNumber;
const int metaData::kColLabelsAreRemappedFieldNumber;
const int metaData::kPremapRowLabelStringFieldNumber;
const int metaData::kPremapColLabelStringFieldNumber;
const int metaData::kRowLabelFieldNumber;
const int metaData::kColLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

metaData::metaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p2p_2eproto::scc_info_metaData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.metaData)
}
metaData::metaData(const metaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      premap_row_label_string_(from.premap_row_label_string_),
      premap_col_label_string_(from.premap_col_label_string_),
      row_label_(from.row_label_),
      col_label_(from.col_label_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_symmetric_, &from.is_symmetric_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_labels_are_remapped_) -
    reinterpret_cast<char*>(&is_symmetric_)) + sizeof(col_labels_are_remapped_));
  // @@protoc_insertion_point(copy_constructor:p2p.metaData)
}

void metaData::SharedCtor() {
  ::memset(&is_symmetric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_labels_are_remapped_) -
      reinterpret_cast<char*>(&is_symmetric_)) + sizeof(col_labels_are_remapped_));
}

metaData::~metaData() {
  // @@protoc_insertion_point(destructor:p2p.metaData)
  SharedDtor();
}

void metaData::SharedDtor() {
}

void metaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* metaData::descriptor() {
  ::protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const metaData& metaData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p2p_2eproto::scc_info_metaData.base);
  return *internal_default_instance();
}


void metaData::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.metaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  premap_row_label_string_.Clear();
  premap_col_label_string_.Clear();
  row_label_.Clear();
  col_label_.Clear();
  ::memset(&is_symmetric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_labels_are_remapped_) -
      reinterpret_cast<char*>(&is_symmetric_)) + sizeof(col_labels_are_remapped_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool metaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.metaData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_symmetric = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_symmetric();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_symmetric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool row_labels_are_remapped = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_row_labels_are_remapped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_labels_are_remapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool col_labels_are_remapped = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_col_labels_are_remapped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &col_labels_are_remapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string premap_row_label_string = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_premap_row_label_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->premap_row_label_string(this->premap_row_label_string_size() - 1).data(),
            static_cast<int>(this->premap_row_label_string(this->premap_row_label_string_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.metaData.premap_row_label_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string premap_col_label_string = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_premap_col_label_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->premap_col_label_string(this->premap_col_label_string_size() - 1).data(),
            static_cast<int>(this->premap_col_label_string(this->premap_col_label_string_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.metaData.premap_col_label_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 row_label = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_row_label())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_row_label())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 col_label = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_col_label())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_col_label())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.metaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.metaData)
  return false;
#undef DO_
}

void metaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.metaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_symmetric = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_symmetric(), output);
  }

  // required bool row_labels_are_remapped = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->row_labels_are_remapped(), output);
  }

  // required bool col_labels_are_remapped = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->col_labels_are_remapped(), output);
  }

  // repeated string premap_row_label_string = 4;
  for (int i = 0, n = this->premap_row_label_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->premap_row_label_string(i).data(), static_cast<int>(this->premap_row_label_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.metaData.premap_row_label_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->premap_row_label_string(i), output);
  }

  // repeated string premap_col_label_string = 5;
  for (int i = 0, n = this->premap_col_label_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->premap_col_label_string(i).data(), static_cast<int>(this->premap_col_label_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.metaData.premap_col_label_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->premap_col_label_string(i), output);
  }

  // repeated int64 row_label = 6;
  for (int i = 0, n = this->row_label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->row_label(i), output);
  }

  // repeated int64 col_label = 7;
  for (int i = 0, n = this->col_label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->col_label(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.metaData)
}

::google::protobuf::uint8* metaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.metaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_symmetric = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_symmetric(), target);
  }

  // required bool row_labels_are_remapped = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->row_labels_are_remapped(), target);
  }

  // required bool col_labels_are_remapped = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->col_labels_are_remapped(), target);
  }

  // repeated string premap_row_label_string = 4;
  for (int i = 0, n = this->premap_row_label_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->premap_row_label_string(i).data(), static_cast<int>(this->premap_row_label_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.metaData.premap_row_label_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->premap_row_label_string(i), target);
  }

  // repeated string premap_col_label_string = 5;
  for (int i = 0, n = this->premap_col_label_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->premap_col_label_string(i).data(), static_cast<int>(this->premap_col_label_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.metaData.premap_col_label_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->premap_col_label_string(i), target);
  }

  // repeated int64 row_label = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->row_label_, target);

  // repeated int64 col_label = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(7, this->col_label_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.metaData)
  return target;
}

size_t metaData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.metaData)
  size_t total_size = 0;

  if (has_is_symmetric()) {
    // required bool is_symmetric = 1;
    total_size += 1 + 1;
  }

  if (has_row_labels_are_remapped()) {
    // required bool row_labels_are_remapped = 2;
    total_size += 1 + 1;
  }

  if (has_col_labels_are_remapped()) {
    // required bool col_labels_are_remapped = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t metaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.metaData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool is_symmetric = 1;
    total_size += 1 + 1;

    // required bool row_labels_are_remapped = 2;
    total_size += 1 + 1;

    // required bool col_labels_are_remapped = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string premap_row_label_string = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->premap_row_label_string_size());
  for (int i = 0, n = this->premap_row_label_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->premap_row_label_string(i));
  }

  // repeated string premap_col_label_string = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->premap_col_label_string_size());
  for (int i = 0, n = this->premap_col_label_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->premap_col_label_string(i));
  }

  // repeated int64 row_label = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->row_label_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->row_label_size());
    total_size += data_size;
  }

  // repeated int64 col_label = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->col_label_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->col_label_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void metaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.metaData)
  GOOGLE_DCHECK_NE(&from, this);
  const metaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const metaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.metaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.metaData)
    MergeFrom(*source);
  }
}

void metaData::MergeFrom(const metaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.metaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  premap_row_label_string_.MergeFrom(from.premap_row_label_string_);
  premap_col_label_string_.MergeFrom(from.premap_col_label_string_);
  row_label_.MergeFrom(from.row_label_);
  col_label_.MergeFrom(from.col_label_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      is_symmetric_ = from.is_symmetric_;
    }
    if (cached_has_bits & 0x00000002u) {
      row_labels_are_remapped_ = from.row_labels_are_remapped_;
    }
    if (cached_has_bits & 0x00000004u) {
      col_labels_are_remapped_ = from.col_labels_are_remapped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void metaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.metaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metaData::CopyFrom(const metaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.metaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void metaData::Swap(metaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void metaData::InternalSwap(metaData* other) {
  using std::swap;
  premap_row_label_string_.InternalSwap(CastToBase(&other->premap_row_label_string_));
  premap_col_label_string_.InternalSwap(CastToBase(&other->premap_col_label_string_));
  row_label_.InternalSwap(&other->row_label_);
  col_label_.InternalSwap(&other->col_label_);
  swap(is_symmetric_, other->is_symmetric_);
  swap(row_labels_are_remapped_, other->row_labels_are_remapped_);
  swap(col_labels_are_remapped_, other->col_labels_are_remapped_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata metaData::GetMetadata() const {
  protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void dataRow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dataRow::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dataRow::dataRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p2p_2eproto::scc_info_dataRow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.dataRow)
}
dataRow::dataRow(const dataRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p2p.dataRow)
}

void dataRow::SharedCtor() {
}

dataRow::~dataRow() {
  // @@protoc_insertion_point(destructor:p2p.dataRow)
  SharedDtor();
}

void dataRow::SharedDtor() {
}

void dataRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* dataRow::descriptor() {
  ::protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dataRow& dataRow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p2p_2eproto::scc_info_dataRow.base);
  return *internal_default_instance();
}


void dataRow::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.dataRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dataRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.dataRow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.dataRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.dataRow)
  return false;
#undef DO_
}

void dataRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.dataRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.dataRow)
}

::google::protobuf::uint8* dataRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.dataRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->value_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.dataRow)
  return target;
}

size_t dataRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.dataRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 value = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->value_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dataRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.dataRow)
  GOOGLE_DCHECK_NE(&from, this);
  const dataRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dataRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.dataRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.dataRow)
    MergeFrom(*source);
  }
}

void dataRow::MergeFrom(const dataRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.dataRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void dataRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.dataRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dataRow::CopyFrom(const dataRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.dataRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dataRow::IsInitialized() const {
  return true;
}

void dataRow::Swap(dataRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dataRow::InternalSwap(dataRow* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata dataRow::GetMetadata() const {
  protobuf_p2p_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p2p_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::metaData* Arena::CreateMaybeMessage< ::p2p::metaData >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::metaData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::dataRow* Arena::CreateMaybeMessage< ::p2p::dataRow >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::dataRow >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
