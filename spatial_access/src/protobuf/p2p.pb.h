// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#ifndef PROTOBUF_INCLUDED_p2p_2eproto
#define PROTOBUF_INCLUDED_p2p_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_p2p_2eproto 

namespace protobuf_p2p_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_p2p_2eproto
namespace p2p {
class dataRow;
class dataRowDefaultTypeInternal;
extern dataRowDefaultTypeInternal _dataRow_default_instance_;
class metaData;
class metaDataDefaultTypeInternal;
extern metaDataDefaultTypeInternal _metaData_default_instance_;
}  // namespace p2p
namespace google {
namespace protobuf {
template<> ::p2p::dataRow* Arena::CreateMaybeMessage<::p2p::dataRow>(Arena*);
template<> ::p2p::metaData* Arena::CreateMaybeMessage<::p2p::metaData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace p2p {

// ===================================================================

class metaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.metaData) */ {
 public:
  metaData();
  virtual ~metaData();

  metaData(const metaData& from);

  inline metaData& operator=(const metaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  metaData(metaData&& from) noexcept
    : metaData() {
    *this = ::std::move(from);
  }

  inline metaData& operator=(metaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const metaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const metaData* internal_default_instance() {
    return reinterpret_cast<const metaData*>(
               &_metaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(metaData* other);
  friend void swap(metaData& a, metaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline metaData* New() const final {
    return CreateMaybeMessage<metaData>(NULL);
  }

  metaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<metaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const metaData& from);
  void MergeFrom(const metaData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(metaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string premap_row_label_string = 4;
  int premap_row_label_string_size() const;
  void clear_premap_row_label_string();
  static const int kPremapRowLabelStringFieldNumber = 4;
  const ::std::string& premap_row_label_string(int index) const;
  ::std::string* mutable_premap_row_label_string(int index);
  void set_premap_row_label_string(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_premap_row_label_string(int index, ::std::string&& value);
  #endif
  void set_premap_row_label_string(int index, const char* value);
  void set_premap_row_label_string(int index, const char* value, size_t size);
  ::std::string* add_premap_row_label_string();
  void add_premap_row_label_string(const ::std::string& value);
  #if LANG_CXX11
  void add_premap_row_label_string(::std::string&& value);
  #endif
  void add_premap_row_label_string(const char* value);
  void add_premap_row_label_string(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& premap_row_label_string() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_premap_row_label_string();

  // repeated string premap_col_label_string = 5;
  int premap_col_label_string_size() const;
  void clear_premap_col_label_string();
  static const int kPremapColLabelStringFieldNumber = 5;
  const ::std::string& premap_col_label_string(int index) const;
  ::std::string* mutable_premap_col_label_string(int index);
  void set_premap_col_label_string(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_premap_col_label_string(int index, ::std::string&& value);
  #endif
  void set_premap_col_label_string(int index, const char* value);
  void set_premap_col_label_string(int index, const char* value, size_t size);
  ::std::string* add_premap_col_label_string();
  void add_premap_col_label_string(const ::std::string& value);
  #if LANG_CXX11
  void add_premap_col_label_string(::std::string&& value);
  #endif
  void add_premap_col_label_string(const char* value);
  void add_premap_col_label_string(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& premap_col_label_string() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_premap_col_label_string();

  // repeated int64 row_label = 6;
  int row_label_size() const;
  void clear_row_label();
  static const int kRowLabelFieldNumber = 6;
  ::google::protobuf::int64 row_label(int index) const;
  void set_row_label(int index, ::google::protobuf::int64 value);
  void add_row_label(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      row_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_row_label();

  // repeated int64 col_label = 7;
  int col_label_size() const;
  void clear_col_label();
  static const int kColLabelFieldNumber = 7;
  ::google::protobuf::int64 col_label(int index) const;
  void set_col_label(int index, ::google::protobuf::int64 value);
  void add_col_label(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      col_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_col_label();

  // required bool is_symmetric = 1;
  bool has_is_symmetric() const;
  void clear_is_symmetric();
  static const int kIsSymmetricFieldNumber = 1;
  bool is_symmetric() const;
  void set_is_symmetric(bool value);

  // required bool row_labels_are_remapped = 2;
  bool has_row_labels_are_remapped() const;
  void clear_row_labels_are_remapped();
  static const int kRowLabelsAreRemappedFieldNumber = 2;
  bool row_labels_are_remapped() const;
  void set_row_labels_are_remapped(bool value);

  // required bool col_labels_are_remapped = 3;
  bool has_col_labels_are_remapped() const;
  void clear_col_labels_are_remapped();
  static const int kColLabelsAreRemappedFieldNumber = 3;
  bool col_labels_are_remapped() const;
  void set_col_labels_are_remapped(bool value);

  // @@protoc_insertion_point(class_scope:p2p.metaData)
 private:
  void set_has_is_symmetric();
  void clear_has_is_symmetric();
  void set_has_row_labels_are_remapped();
  void clear_has_row_labels_are_remapped();
  void set_has_col_labels_are_remapped();
  void clear_has_col_labels_are_remapped();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> premap_row_label_string_;
  ::google::protobuf::RepeatedPtrField< ::std::string> premap_col_label_string_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > row_label_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > col_label_;
  bool is_symmetric_;
  bool row_labels_are_remapped_;
  bool col_labels_are_remapped_;
  friend struct ::protobuf_p2p_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dataRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.dataRow) */ {
 public:
  dataRow();
  virtual ~dataRow();

  dataRow(const dataRow& from);

  inline dataRow& operator=(const dataRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  dataRow(dataRow&& from) noexcept
    : dataRow() {
    *this = ::std::move(from);
  }

  inline dataRow& operator=(dataRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dataRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dataRow* internal_default_instance() {
    return reinterpret_cast<const dataRow*>(
               &_dataRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(dataRow* other);
  friend void swap(dataRow& a, dataRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline dataRow* New() const final {
    return CreateMaybeMessage<dataRow>(NULL);
  }

  dataRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<dataRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const dataRow& from);
  void MergeFrom(const dataRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dataRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value(int index) const;
  void set_value(int index, ::google::protobuf::int32 value);
  void add_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:p2p.dataRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  friend struct ::protobuf_p2p_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// metaData

// required bool is_symmetric = 1;
inline bool metaData::has_is_symmetric() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void metaData::set_has_is_symmetric() {
  _has_bits_[0] |= 0x00000001u;
}
inline void metaData::clear_has_is_symmetric() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void metaData::clear_is_symmetric() {
  is_symmetric_ = false;
  clear_has_is_symmetric();
}
inline bool metaData::is_symmetric() const {
  // @@protoc_insertion_point(field_get:p2p.metaData.is_symmetric)
  return is_symmetric_;
}
inline void metaData::set_is_symmetric(bool value) {
  set_has_is_symmetric();
  is_symmetric_ = value;
  // @@protoc_insertion_point(field_set:p2p.metaData.is_symmetric)
}

// required bool row_labels_are_remapped = 2;
inline bool metaData::has_row_labels_are_remapped() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void metaData::set_has_row_labels_are_remapped() {
  _has_bits_[0] |= 0x00000002u;
}
inline void metaData::clear_has_row_labels_are_remapped() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void metaData::clear_row_labels_are_remapped() {
  row_labels_are_remapped_ = false;
  clear_has_row_labels_are_remapped();
}
inline bool metaData::row_labels_are_remapped() const {
  // @@protoc_insertion_point(field_get:p2p.metaData.row_labels_are_remapped)
  return row_labels_are_remapped_;
}
inline void metaData::set_row_labels_are_remapped(bool value) {
  set_has_row_labels_are_remapped();
  row_labels_are_remapped_ = value;
  // @@protoc_insertion_point(field_set:p2p.metaData.row_labels_are_remapped)
}

// required bool col_labels_are_remapped = 3;
inline bool metaData::has_col_labels_are_remapped() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void metaData::set_has_col_labels_are_remapped() {
  _has_bits_[0] |= 0x00000004u;
}
inline void metaData::clear_has_col_labels_are_remapped() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void metaData::clear_col_labels_are_remapped() {
  col_labels_are_remapped_ = false;
  clear_has_col_labels_are_remapped();
}
inline bool metaData::col_labels_are_remapped() const {
  // @@protoc_insertion_point(field_get:p2p.metaData.col_labels_are_remapped)
  return col_labels_are_remapped_;
}
inline void metaData::set_col_labels_are_remapped(bool value) {
  set_has_col_labels_are_remapped();
  col_labels_are_remapped_ = value;
  // @@protoc_insertion_point(field_set:p2p.metaData.col_labels_are_remapped)
}

// repeated string premap_row_label_string = 4;
inline int metaData::premap_row_label_string_size() const {
  return premap_row_label_string_.size();
}
inline void metaData::clear_premap_row_label_string() {
  premap_row_label_string_.Clear();
}
inline const ::std::string& metaData::premap_row_label_string(int index) const {
  // @@protoc_insertion_point(field_get:p2p.metaData.premap_row_label_string)
  return premap_row_label_string_.Get(index);
}
inline ::std::string* metaData::mutable_premap_row_label_string(int index) {
  // @@protoc_insertion_point(field_mutable:p2p.metaData.premap_row_label_string)
  return premap_row_label_string_.Mutable(index);
}
inline void metaData::set_premap_row_label_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p2p.metaData.premap_row_label_string)
  premap_row_label_string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void metaData::set_premap_row_label_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:p2p.metaData.premap_row_label_string)
  premap_row_label_string_.Mutable(index)->assign(std::move(value));
}
#endif
inline void metaData::set_premap_row_label_string(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  premap_row_label_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p2p.metaData.premap_row_label_string)
}
inline void metaData::set_premap_row_label_string(int index, const char* value, size_t size) {
  premap_row_label_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2p.metaData.premap_row_label_string)
}
inline ::std::string* metaData::add_premap_row_label_string() {
  // @@protoc_insertion_point(field_add_mutable:p2p.metaData.premap_row_label_string)
  return premap_row_label_string_.Add();
}
inline void metaData::add_premap_row_label_string(const ::std::string& value) {
  premap_row_label_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p2p.metaData.premap_row_label_string)
}
#if LANG_CXX11
inline void metaData::add_premap_row_label_string(::std::string&& value) {
  premap_row_label_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p2p.metaData.premap_row_label_string)
}
#endif
inline void metaData::add_premap_row_label_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  premap_row_label_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p2p.metaData.premap_row_label_string)
}
inline void metaData::add_premap_row_label_string(const char* value, size_t size) {
  premap_row_label_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p2p.metaData.premap_row_label_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
metaData::premap_row_label_string() const {
  // @@protoc_insertion_point(field_list:p2p.metaData.premap_row_label_string)
  return premap_row_label_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
metaData::mutable_premap_row_label_string() {
  // @@protoc_insertion_point(field_mutable_list:p2p.metaData.premap_row_label_string)
  return &premap_row_label_string_;
}

// repeated string premap_col_label_string = 5;
inline int metaData::premap_col_label_string_size() const {
  return premap_col_label_string_.size();
}
inline void metaData::clear_premap_col_label_string() {
  premap_col_label_string_.Clear();
}
inline const ::std::string& metaData::premap_col_label_string(int index) const {
  // @@protoc_insertion_point(field_get:p2p.metaData.premap_col_label_string)
  return premap_col_label_string_.Get(index);
}
inline ::std::string* metaData::mutable_premap_col_label_string(int index) {
  // @@protoc_insertion_point(field_mutable:p2p.metaData.premap_col_label_string)
  return premap_col_label_string_.Mutable(index);
}
inline void metaData::set_premap_col_label_string(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p2p.metaData.premap_col_label_string)
  premap_col_label_string_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void metaData::set_premap_col_label_string(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:p2p.metaData.premap_col_label_string)
  premap_col_label_string_.Mutable(index)->assign(std::move(value));
}
#endif
inline void metaData::set_premap_col_label_string(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  premap_col_label_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p2p.metaData.premap_col_label_string)
}
inline void metaData::set_premap_col_label_string(int index, const char* value, size_t size) {
  premap_col_label_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2p.metaData.premap_col_label_string)
}
inline ::std::string* metaData::add_premap_col_label_string() {
  // @@protoc_insertion_point(field_add_mutable:p2p.metaData.premap_col_label_string)
  return premap_col_label_string_.Add();
}
inline void metaData::add_premap_col_label_string(const ::std::string& value) {
  premap_col_label_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p2p.metaData.premap_col_label_string)
}
#if LANG_CXX11
inline void metaData::add_premap_col_label_string(::std::string&& value) {
  premap_col_label_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p2p.metaData.premap_col_label_string)
}
#endif
inline void metaData::add_premap_col_label_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  premap_col_label_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p2p.metaData.premap_col_label_string)
}
inline void metaData::add_premap_col_label_string(const char* value, size_t size) {
  premap_col_label_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p2p.metaData.premap_col_label_string)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
metaData::premap_col_label_string() const {
  // @@protoc_insertion_point(field_list:p2p.metaData.premap_col_label_string)
  return premap_col_label_string_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
metaData::mutable_premap_col_label_string() {
  // @@protoc_insertion_point(field_mutable_list:p2p.metaData.premap_col_label_string)
  return &premap_col_label_string_;
}

// repeated int64 row_label = 6;
inline int metaData::row_label_size() const {
  return row_label_.size();
}
inline void metaData::clear_row_label() {
  row_label_.Clear();
}
inline ::google::protobuf::int64 metaData::row_label(int index) const {
  // @@protoc_insertion_point(field_get:p2p.metaData.row_label)
  return row_label_.Get(index);
}
inline void metaData::set_row_label(int index, ::google::protobuf::int64 value) {
  row_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:p2p.metaData.row_label)
}
inline void metaData::add_row_label(::google::protobuf::int64 value) {
  row_label_.Add(value);
  // @@protoc_insertion_point(field_add:p2p.metaData.row_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
metaData::row_label() const {
  // @@protoc_insertion_point(field_list:p2p.metaData.row_label)
  return row_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
metaData::mutable_row_label() {
  // @@protoc_insertion_point(field_mutable_list:p2p.metaData.row_label)
  return &row_label_;
}

// repeated int64 col_label = 7;
inline int metaData::col_label_size() const {
  return col_label_.size();
}
inline void metaData::clear_col_label() {
  col_label_.Clear();
}
inline ::google::protobuf::int64 metaData::col_label(int index) const {
  // @@protoc_insertion_point(field_get:p2p.metaData.col_label)
  return col_label_.Get(index);
}
inline void metaData::set_col_label(int index, ::google::protobuf::int64 value) {
  col_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:p2p.metaData.col_label)
}
inline void metaData::add_col_label(::google::protobuf::int64 value) {
  col_label_.Add(value);
  // @@protoc_insertion_point(field_add:p2p.metaData.col_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
metaData::col_label() const {
  // @@protoc_insertion_point(field_list:p2p.metaData.col_label)
  return col_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
metaData::mutable_col_label() {
  // @@protoc_insertion_point(field_mutable_list:p2p.metaData.col_label)
  return &col_label_;
}

// -------------------------------------------------------------------

// dataRow

// repeated int32 value = 1;
inline int dataRow::value_size() const {
  return value_.size();
}
inline void dataRow::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 dataRow::value(int index) const {
  // @@protoc_insertion_point(field_get:p2p.dataRow.value)
  return value_.Get(index);
}
inline void dataRow::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:p2p.dataRow.value)
}
inline void dataRow::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:p2p.dataRow.value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dataRow::value() const {
  // @@protoc_insertion_point(field_list:p2p.dataRow.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dataRow::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:p2p.dataRow.value)
  return &value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_p2p_2eproto
