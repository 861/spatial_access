Instructions for running the following scripts to generate CSV files for:
-Map 1:  Total dollars per agency, mapped at the headquarters addresses
-Map 1b: Map 1, but at the contract level
-Map 2:  Total dollars per agency, divided over the headquarters and service addresses
-Map 2b: Map 2, but at the contract level
-Map 3:  Total dollars per fiscal year per agency, divided over the headquarters and service addresses
-Map 3b: Map 3, but at contract level
-Map 4:  All non-profits in Chicago, regardless of whether they had contracts with the city, county, or state, mapped at their headquarters address

--------------------------------------------------------------------------------


Run the scripts in this order, geocoding address files and running the deduplication script when indicated:
-prehq.py: Produces the file for the deduplication script.
-Run: python3 dedupe_contracts.py -f ../../../rcc-uchicago/PCNO/CSV/chicago/prehq_contracts.csv
-hq.py: Produces a file to be geocoded.
-Geocode the map1_addresses_for_geocoding.csv file.
-map1.py: Produces the file for Map 1.
-map1b.py: Produces the file for Map 1b.
-validate_map1_amounts.py: Validates the amounts for Map 1 and Map 1b.
-presvc.py: Prepares service agencies for linking with headquarters.
-link_contracts_agencies.py: Uses the dedupe module to link known agencies to their service addresses.
-svc_agencies.py: Produces a file to be geocoded.
-Geocode the map2_geocoding.csv file.
-map2.py: Produces the files for Map 2.
-map2b.py: Produces the files for Map 2b.
-validate_map2_amounts.py: Validates the amounts for Map 2 and Map 2b.
-maps3.py: Produces the files for Map 3 and Map 3b; validates the amounts.
-premap4.py; Produces a file to be geocoded.
-Geocode the map4_for_geocoding.csv file.
-map4.py: Produces the file for Map 4.

--------------------------------------------------------------------------------


The scripts use the following modules:
-ADDRESS_CLEANER: Contains functions for cleaning single address strings and fixing known address-related problems in the data.
-AMOUNT_CALCULATIONS.py: Contains functions for cleaning dollar amounts and limiting the contracts considered based on a minimum amount.
-COMPARE_ADDRESSES.py: Compares different address strings for locations of a single agency to consolidate duplicate locations with different strings (i.e., '123 S Main St' and '123 South Main Street')
-DFSS.py: Contains functions to read in the DFSS agency data with minimal manipulation.
-IMPORT_ADDRESSES.py: Contains functions to read in all of the agency datasets.
-MAPSCORPS.py: Contains functions to read in the MAPSCORPS agency data with minimal manipulation.
-MATCH_NAMES.py: Contains functions to match records based on names using Jaro-Winkler distance.
-MERGE_CONTRACTS.py: Contains functions to read in the contracts datasets.
-PURPLEBINDER.py: Contains functinos to read in the PURPLEBINDER agency data with minimal manipulation.
-SERVICE_ADDRESS_CLEANER.py: Contains functions to clean address strings based on the peculiarities of the agency datasets.
-SERVICE_STANDARDIZE_NAME.py: Contains a function to clean name strings based on the peculiarities of the agency datasets.
-STANDARDIZE_NAME.py: Contains a function to clean name strings.
-UTILS.py: Contains functions to clean Zip codes, uppercase a dataframe, and merge values into a dataframe that already has those same fields.
-WESTCHI.py: Contains functions to read in the WESTCHI agency data with minimal manipulation.
